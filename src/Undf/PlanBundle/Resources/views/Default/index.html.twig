{% extends 'MopaBootstrapBundle::base.html.twig' %}

{% block title %}{{ plan.name }}{% endblock title %}

{% block head_style %}
    {# Override this block to add your own files! #}
    {% stylesheets
        '@MopaBootstrapBundle/Resources/public/less/mopabootstrapbundle.less'
        '@UndfPlanBundle/Resources/public/less/all.less'

        'components/fancybox/source/jquery.fancybox.css'
        'components/fancybox/source/helpers/jquery.fancybox-buttons.css'
        'components/fancybox/source/helpers/jquery.fancybox-thumbs.css'

        filter="cssrewrite,lessphp"
        output="comb/css/commons.css"
    %}
<link href="{{ asset_url }}" type="text/css" rel="stylesheet" media="screen" />
    {% endstylesheets %}

    {# To use this without less use the base_css.html.twig template as your base
    <link href="/maps/documentation/javascript/examples/default.css" rel="stylesheet">
     # Be sure you understand whats going on: have a look into
     # https://github.com/phiamo/MopaBootstrapBundle/blob/master/Resources/doc/css-vs-less.md
     #}
{% endblock head_style %}

{% block head_script %}
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script>
    /* An InfoBox is like an info window, but it displays
     * under the marker, opens quicker, and has flexible styling.
     * @param {GLatLng} latlng Point to place bar at
     * @param {Map} map The map on which to display this InfoBox.
     * @param {Object} opts Passes configuration options - content,
     *   offsetVertical, offsetHorizontal, className, height, width
     */
    function InfoBox(opts) {
        google.maps.OverlayView.call(this);
        this.latlng_ = opts.latlng;
        this.map_ = opts.map;
        this.offsetVertical_ = -195;
        this.offsetHorizontal_ = 0;
        this.height_ = 165;
        this.width_ = 266;
        this.title = opts.title
        this.content = opts.content

        var me = this;
        this.boundsChangedListener_ =
                google.maps.event.addListener(this.map_, "bounds_changed", function() {
            return me.panMap.apply(me);
        });

        // Once the properties of this OverlayView are initialized, set its map so
        // that we can display it.  This will trigger calls to panes_changed and
        // draw.
        this.setMap(this.map_);
    }

    /* InfoBox extends GOverlay class from the Google Maps API
     */
    InfoBox.prototype = new google.maps.OverlayView();

    /* Creates the DIV representing this InfoBox
     */
    InfoBox.prototype.remove = function() {
        if (this.div_) {
            this.div_.parentNode.removeChild(this.div_);
            this.div_ = null;
        }
    };

    /* Redraw the Bar based on the current projection and zoom level
     */
    InfoBox.prototype.draw = function() {
        // Creates the element if it doesn't exist already.
        this.createElement();
        if (!this.div_)
            return;

        // Calculate the DIV coordinates of two opposite corners of our bounds to
        // get the size and position of our Bar
        var pixPosition = this.getProjection().fromLatLngToDivPixel(this.latlng_);
        if (!pixPosition)
            return;

        // Now position our DIV based on the DIV coordinates of our bounds
        this.div_.style.width = this.width_ + "px";
        this.div_.style.left = (pixPosition.x + this.offsetHorizontal_) + "px";
        this.div_.style.height = this.height_ + "px";
        this.div_.style.top = (pixPosition.y + this.offsetVertical_) + "px";
        this.div_.style.display = 'block';
    };

    /* Creates the DIV representing this InfoBox in the floatPane.  If the panes
     * object, retrieved by calling getPanes, is null, remove the element from the
     * DOM.  If the div exists, but its parent is not the floatPane, move the div
     * to the new pane.
     * Called from within draw.  Alternatively, this can be called specifically on
     * a panes_changed event.
     */
    InfoBox.prototype.createElement = function() {
        var panes = this.getPanes();
        var div = this.div_;
        if (!div) {
            // This does not handle changing panes.  You can set the map to be null and
            // then reset the map to move the div.
            div = this.div_ = document.createElement("div");
            div.style.border = "0px none";
            div.style.position = "absolute";
            div.style.background = "url('http://gmaps-samples.googlecode.com/svn/trunk/images/blueinfowindow.gif')";
            div.style.width = this.width_ + "px";
            div.style.height = this.height_ + "px";
            var contentDiv = document.createElement("div");
            contentDiv.style.padding = "5px 30px"
            contentDiv.innerHTML = this.content;

            var topDiv = document.createElement("div");
            topDiv.style.textAlign = "right";
            topDiv.style.marginTop = "-5px";
            var topInnerDiv = document.createElement("span");
            topInnerDiv.innerHTML = this.title;
            topDiv.appendChild(topInnerDiv);

            var closeImg = document.createElement("img");
            closeImg.style.width = "32px";
            closeImg.style.height = "32px";
            closeImg.style.cursor = "pointer";
            closeImg.src = "http://gmaps-samples.googlecode.com/svn/trunk/images/closebigger.gif";
            topDiv.appendChild(closeImg);

            function removeInfoBox(ib) {
                return function() {
                    ib.setMap(null);
                };
            }

            google.maps.event.addDomListener(closeImg, 'click', removeInfoBox(this));

            div.appendChild(topDiv);
            div.appendChild(contentDiv);
            div.style.display = 'none';
            panes.floatPane.appendChild(div);
            this.panMap();
        } else if (div.parentNode != panes.floatPane) {
            // The panes have changed.  Move the div.
            div.parentNode.removeChild(div);
            panes.floatPane.appendChild(div);
        } else {
            // The panes have not changed, so no need to create or move the div.
        }
    }

    /* Pan the map to fit the InfoBox.
     */
    InfoBox.prototype.panMap = function() {
        // if we go beyond map, pan map
        var map = this.map_;
        var bounds = map.getBounds();
        if (!bounds)
            return;

        // The position of the infowindow
        var position = this.latlng_;

        // The dimension of the infowindow
        var iwWidth = this.width_;
        var iwHeight = this.height_;

        // The offset position of the infowindow
        var iwOffsetX = this.offsetHorizontal_;
        var iwOffsetY = this.offsetVertical_;

        // Padding on the infowindow
        var padX = 40;
        var padY = 40;

        // The degrees per pixel
        var mapDiv = map.getDiv();
        var mapWidth = mapDiv.offsetWidth;
        var mapHeight = mapDiv.offsetHeight;
        var boundsSpan = bounds.toSpan();
        var longSpan = boundsSpan.lng();
        var latSpan = boundsSpan.lat();
        var degPixelX = longSpan / mapWidth;
        var degPixelY = latSpan / mapHeight;

        // The bounds of the map
        var mapWestLng = bounds.getSouthWest().lng();
        var mapEastLng = bounds.getNorthEast().lng();
        var mapNorthLat = bounds.getNorthEast().lat();
        var mapSouthLat = bounds.getSouthWest().lat();

        // The bounds of the infowindow
        var iwWestLng = position.lng() + (iwOffsetX - padX) * degPixelX;
        var iwEastLng = position.lng() + (iwOffsetX + iwWidth + padX) * degPixelX;
        var iwNorthLat = position.lat() - (iwOffsetY - padY) * degPixelY;
        var iwSouthLat = position.lat() - (iwOffsetY + iwHeight + padY) * degPixelY;

        // calculate center shift
        var shiftLng =
                (iwWestLng < mapWestLng ? mapWestLng - iwWestLng : 0) +
                (iwEastLng > mapEastLng ? mapEastLng - iwEastLng : 0);
        var shiftLat =
                (iwNorthLat > mapNorthLat ? mapNorthLat - iwNorthLat : 0) +
                (iwSouthLat < mapSouthLat ? mapSouthLat - iwSouthLat : 0);

        // The center of the map
        var center = map.getCenter();

        // The new map center
        var centerX = center.lng() - shiftLng;
        var centerY = center.lat() - shiftLat;

        // center the map to the new shifted center
        map.setCenter(new google.maps.LatLng(centerY, centerX));

        // Remove the listener after panning is complete.
        google.maps.event.removeListener(this.boundsChangedListener_);
        this.boundsChangedListener_ = null;
    };

    /*
     * END InfoBox definition
     */


    var directionDisplay;
    var directionsService = new google.maps.DirectionsService();
    var map;
    var infoWindowArray = [];

    function initialize() {
        directionsDisplay = new google.maps.DirectionsRenderer({
            suppressMarkers: true,
        });
        var zagreb = new google.maps.LatLng(45.8130293, 15.9778949);
        var mapOptions = {
            zoom: 6,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: zagreb
        }
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        directionsDisplay.setMap(map);
    }

    function calcRoute() {
        var start = document.getElementById('start').value;
        var end = document.getElementById('end').value;
        var waypts = [];
        var checkboxArray = document.getElementById('waypoints');
        for (var i = 0; i < checkboxArray.length; i++) {
            if (checkboxArray.options[i].selected == true) {
                if(checkboxArray[i].value != start && checkboxArray[i].value != end) {
                    waypts.push({
                        location: checkboxArray[i].value,
                        stopover: true});
                }
            }
        }

        var request = {
            origin: start,
            destination: end,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: google.maps.DirectionsTravelMode.DRIVING
        };
        directionsService.route(request, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
                var route = response.routes[0];
                var summaryPanel = document.getElementById('directions_panel');
                var totalPanel = document.getElementById('directions_totals');
                var stageNames = parseNames(response);
                var totalDist = 0;
                var totalTime = 0;

                summaryPanel.innerHTML = '';
                // For each route, display summary information.
                for (var i = 0; i < route.legs.length; i++) {
                    var routeSegment = i + 1;
                    summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment + '</b><br>';
                    summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                    summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                    summaryPanel.innerHTML += route.legs[i].distance.text + ' - ';
                    summaryPanel.innerHTML += route.legs[i].duration.text + '<br><br>';

                    totalDist = totalDist + route.legs[i].distance.value;
                    totalTime = totalTime + route.legs[i].duration.value

                    if (i == 0) {
                        makeMarker(route.legs[i].start_location, stageNames[i]);
                        makeMarker(route.legs[i].end_location, stageNames[i + 1]);
                    } else {
                        makeMarker(route.legs[i].end_location, stageNames[i + 1]);
                    }
                }
                totalPanel.innerHTML = 'TOTAL: ' + totalDist/1000 + ' km - ' + formatTime(totalTime);
            }
        });
    }

    var formatTime = function(unixTimestamp) {
    var dt = new Date(unixTimestamp * 1000);

    var hours = dt.getHours() - 1;
    var minutes = dt.getMinutes();

    // the above dt.get...() functions return a single digit
    // so I prepend the zero here when needed
    if (hours < 10)
     hours = '0' + hours;

    if (minutes < 10)
     minutes = '0' + minutes;

    return hours + "h " + minutes + "m ";
}

    function parseNames(directionsInfo)
    {
        var names = [];
        names.push(directionsInfo.Mb.origin);
        for (var i = 0; i < directionsInfo.Mb.waypoints.length; i++) {
            names.push(directionsInfo.Mb.waypoints[i].location);
        }
        names.push(directionsInfo.Mb.destination);
        return names;
    }

    function makeMarker(position, name) {
        var marker = new google.maps.Marker({
            position: position,
            map: map,
            title: name
        });


        google.maps.event.addListener(marker, 'click', function() {
            $.get('/infowindow/' + name, {}, function(response) {
                var contentString = response;
                var infoBox = new InfoBox({latlng: marker.getPosition(), map: map, title: name, content: contentString});
                resetInfoWindow();
                infoWindowArray.push(infoBox);
            });
        });
    }

    function resetInfoWindow() {
        for (i in infoWindowArray) {
            infoWindowArray[i].setMap(null);
        }
    }

    </script>
{% endblock head_script %}

{% block navbar %}
{% endblock navbar %}

{% block headline %}{{ plan.name }}{% endblock headline %}

{% block body_tag %}
    <body  onload="initialize()">
{% endblock body_tag %}

{% block content_sidebar %}
    <div id="control_panel" class="align-left">
        <div>
            <b>Desde:</b> <br>
            <select id="start">
            {% for stage in plan.stages %}
                <option value="{{ stage.city.name }}" {%if stage.isStart%}selected="selected"{%endif%}>{{ stage.city.name }}</input>
            {% endfor %}
            </select>
            <br>
            <b>Etapas </b><i>(Máximo 8)</i><b>:</b> <br>
            <i>(Ctrl-Click para selección múltiple)</i> <br>
            <select multiple id="waypoints" size={{plan.stages.count}}>
            {% for stage in plan.stages %}
                <option value="{{ stage.city.name }}" selected="selected">{{ stage.city.name }}</input>
            {% endfor %}
            </select>
            <br>
            <b>Hasta:</b> <br>
            <select id="end">
            {% for stage in plan.stages %}
                <option value="{{ stage.city.name }}" {%if stage.isEnd%}selected="selected"{%endif%}>{{ stage.city.name }}</input>
            {% endfor %}
            </select>
            <input type="submit" onclick="calcRoute();" value="Calcular">
        </div>
        <br>
        <div id="directions_totals"></div> <br>
        <div id="directions_panel"></div>
    </div>
{% endblock content_sidebar %}

{% block content_content %}
                                    <div id="map-canvas"></div>
{% endblock content_content %}

{% block foot_script %}
{# To only use a subset or add more js overwrite and copy paste this block
To speed up page loads save a copy of jQuery in your project and override this block to include the correct path
Otherwise the regeneration is done on every load in dev more with use_controller: true
 #}
    {% javascripts
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-transition.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-alert.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-modal.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-dropdown.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-scrollspy.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-tab.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-tooltip.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-popover.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-button.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-collapse.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-carousel.js'
        '@MopaBootstrapBundle/Resources/bootstrap/js/bootstrap-typeahead.js'
        '@MopaBootstrapBundle/Resources/public/js/mopabootstrap-collection.js'
        '@MopaBootstrapBundle/Resources/public/js/mopabootstrap-subnav.js'

        'components/fancybox/lib/jquery.mousewheel-3.0.6.pack.js'
        'components/fancybox/source/jquery.fancybox.pack.js'
        'components/fancybox/source/helpers/jquery.fancybox-buttons.js'
        'components/fancybox/source/helpers/jquery.fancybox-media.js'
        'components/fancybox/source/helpers/jquery.fancybox-thumbs.js'

        output='comb/js/public_foot_compiled.js'
    %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}

    <script type="text/javascript">
        $(".open_fancybox").live('click',function() {
            $.fancybox.open($.parseJSON($(this).attr('links')));
            return false;
        });
    </script>

{% endblock foot_script %}